// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sourceMap option false should not generate source map when source map is \`null\` from other loader: errors 1`] = `Array []`;

exports[`sourceMap option false should not generate source map when source map is \`null\` from other loader: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
  ],
]
`;

exports[`sourceMap option false should not generate source map when source map is \`null\` from other loader: warnings 1`] = `Array []`;

exports[`sourceMap option false should not generate source map when source map is \`undefined\` from other loader: errors 1`] = `Array []`;

exports[`sourceMap option false should not generate source map when source map is \`undefined\` from other loader: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
  ],
]
`;

exports[`sourceMap option false should not generate source map when source map is \`undefined\` from other loader: warnings 1`] = `Array []`;

exports[`sourceMap option false should not generate source map: errors 1`] = `Array []`;

exports[`sourceMap option false should not generate source map: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
  ],
]
`;

exports[`sourceMap option false should not generate source map: warnings 1`] = `Array []`;

exports[`sourceMap option should not generate sourceMap when source map is valid from other loader (\`sass-loader\`): errors 1`] = `Array []`;

exports[`sourceMap option should not generate sourceMap when source map is valid from other loader (\`sass-loader\`): module (evaluated) 1`] = `
Array [
  Array [
    1,
    "body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}",
    "",
  ],
]
`;

exports[`sourceMap option should not generate sourceMap when source map is valid from other loader (\`sass-loader\`): warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is \`null\` from other loader: errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is \`null\` from other loader: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
    Object {
      "file": "../../basic.css",
      "mappings": "AAAA;EACE,UAAU;AACZ",
      "names": Array [],
      "sources": Array [
        "../../basic.css",
      ],
      "sourcesContent": Array [
        ".class {
  color: red;
}
",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map when source map is \`null\` from other loader: warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is \`undefined\` from other loader: errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is \`undefined\` from other loader: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
    Object {
      "file": "../../basic.css",
      "mappings": "AAAA;EACE,UAAU;AACZ",
      "names": Array [],
      "sources": Array [
        "../../basic.css",
      ],
      "sourcesContent": Array [
        ".class {
  color: red;
}
",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map when source map is \`undefined\` from other loader: warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid and it is string from other loader: errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid and it is string from other loader: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
    Object {
      "file": "../../basic.css",
      "mappings": "AAGA;EACE,UAAA;ACFF",
      "names": Array [],
      "sources": Array [
        "source-map/basic.postcss.css",
        "../../basic.css",
      ],
      "sourcesContent": Array [
        "@custom-media --viewport-medium (width <= 50rem);
@custom-selector :--heading h1, h2, h3, h4, h5, h6;

:root {
  --fontSize: 1rem;
  --mainColor: #12345678;
  --secondaryColor: lab(32.5 38.5 -47.6 / 90%);
}

html {
  overflow: hidden auto;
}

@media (--viewport-medium) {
  body {
    color: var(--mainColor);
    font-family: system-ui;
    font-size: var(--fontSize);
    line-height: calc(var(--fontSize) * 1.5);
    overflow-wrap: break-word;
    padding-inline: calc(var(--fontSize) / 2 + 1px);
  }
}

:--heading {
  margin-block: 0;
}

a {
  color: rgb(0 0 100% / 90%);

&:hover {
   color: rebeccapurple;
 }
}
",
        ".class {
  color: red;
}
",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map when source map is valid and it is string from other loader: warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`postcss-loader\`): errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`postcss-loader\`): module (evaluated) 1`] = `
Array [
  Array [
    1,
    ":root {
  --fontSize: 1rem;
  --mainColor: rgba(18,52,86,0.47059);
  --secondaryColor: rgba(102, 51, 153, 0.9);
}

html {
  overflow-x: hidden;
  overflow-y: auto;
  overflow: hidden auto;
}

@media (max-width: 50rem) {
  body {
    color: rgba(18,52,86,0.47059);
    color: var(--mainColor);
    font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif;
    font-size: 1rem;
    font-size: var(--fontSize);
    line-height: calc(1rem * 1.5);
    line-height: calc(var(--fontSize) * 1.5);
    word-wrap: break-word;
    padding-left: calc(1rem / 2 + 1px);
    padding-right: calc(1rem / 2 + 1px);
    padding-left: calc(var(--fontSize) / 2 + 1px);
    padding-right: calc(var(--fontSize) / 2 + 1px);
  }
}

h1,h2,h3,h4,h5,h6 {
  margin-top: 0;
  margin-bottom: 0;
}

a {
  color: rgba(0, 0, 255, 0.9)
}

a:hover {
   color: #639;
 }
",
    "",
    Object {
      "file": "../../basic.postcss.css",
      "mappings": "AAGA;EACE,gBAAgB;EAChB,mCAAsB;EACtB,yCAA4C;AAC9C;;AAEA;EACE,kBAAqB;EAArB,gBAAqB;EAArB,qBAAqB;AACvB;;AAEA;EACE;IACE,6BAAuB;IAAvB,uBAAuB;IACvB,iGAAsB;IACtB,eAA0B;IAA1B,0BAA0B;IAC1B,6BAAwC;IAAxC,wCAAwC;IACxC,qBAAyB;IACzB,kCAA+C;IAA/C,mCAA+C;IAA/C,6CAA+C;IAA/C,8CAA+C;EACjD;AACF;;AAEA;EACE,aAAe;EAAf,gBAAe;AACjB;;AAEA;EACE;AAKF;;AAHA;GACG,WAAoB;CACtB",
      "names": Array [],
      "sources": Array [
        "../../basic.postcss.css",
      ],
      "sourcesContent": Array [
        "@custom-media --viewport-medium (width <= 50rem);
@custom-selector :--heading h1, h2, h3, h4, h5, h6;

:root {
  --fontSize: 1rem;
  --mainColor: #12345678;
  --secondaryColor: lab(32.5 38.5 -47.6 / 90%);
}

html {
  overflow: hidden auto;
}

@media (--viewport-medium) {
  body {
    color: var(--mainColor);
    font-family: system-ui;
    font-size: var(--fontSize);
    line-height: calc(var(--fontSize) * 1.5);
    overflow-wrap: break-word;
    padding-inline: calc(var(--fontSize) / 2 + 1px);
  }
}

:--heading {
  margin-block: 0;
}

a {
  color: rgb(0 0 100% / 90%);

&:hover {
   color: rebeccapurple;
 }
}
",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`postcss-loader\`): warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`sass-loader\`): errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`sass-loader\`): module (evaluated) 1`] = `
Array [
  Array [
    1,
    "body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}",
    "",
    Object {
      "file": "../../basic.scss",
      "mappings": "AAGA;EACE,gCAAA;EACA,WAJc;ACEhB",
      "names": Array [],
      "sources": Array [
        "source-map/basic.scss",
        "../../basic.scss",
      ],
      "sourcesContent": Array [
        "$font-stack:    Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
",
        "body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map when source map is valid from other loader (\`sass-loader\`): warnings 1`] = `Array []`;

exports[`sourceMap option true should generate source map: errors 1`] = `Array []`;

exports[`sourceMap option true should generate source map: module (evaluated) 1`] = `
Array [
  Array [
    1,
    ".class {
  color: red;
}
",
    "",
    Object {
      "file": "../../basic.css",
      "mappings": "AAAA;EACE,UAAU;AACZ",
      "names": Array [],
      "sources": Array [
        "../../basic.css",
      ],
      "sourcesContent": Array [
        ".class {
  color: red;
}
",
      ],
      "version": 3,
    },
  ],
]
`;

exports[`sourceMap option true should generate source map: warnings 1`] = `Array []`;
